#!/usr/bin/env python
import time, sys, os, commands
import numpy as np
from ligo.gracedb.rest import GraceDb, HTTPError

def get_event_gps(event):
    client = GraceDb()
    try:
      event = client.events(event)
      eventlist = list(event)
      gpstime = [x['gpstime'] for x in eventlist]
      grb_desig = [x['extra_attributes']['GRB']['designation'] for x in eventlist]
      grb_name = [str(i).strip() for i in grb_desig]
      grb_name = ''.join(grb_name)
      if grb_name == 'None':
         grb_name = '{GRB_DESIGNATION}'
      else:
         grb_name = grb_name
      return gpstime,grb_name
    except Exception, e:
      print(e)

def annotate_gracedb(event):
    gracedb = GraceDb()
    graceid = event
    message = 'Draft CIRCULAR for results can be found <a href="https://ldas-jobs.ligo.caltech.edu/~grb.exttrig/grb/online/O2/search/draft_circular/' + event + '-results.txt">here</a>.'
    try:
       r = gracedb.writeLog(graceid,message,tagname="analyst_comments")
       print "Response status: %d" % r.status
    except HTTPError, e:
       print "Something's wrong: %s" % str(e)

def xpipeline_only(event):
    ul90p_hrss = []
    sgc150q9_exclusion = []
    loudest_sig = []; loudest_prob = []; loudest_ra = []
    loudest_dec = []; loudest_peakgps = []; loudest_peakfreq = []
    loudest_startgps = []; loudest_duration = []; loudest_flow = []
    loudest_fhigh = []
    try:
      load_file = open('/home/grb.exttrig/Online/O2/processor/runs/X/GRB' + event + '/auto_web/' + event+ '_online_openbox_summary.txt')
      for line in load_file:
          if 'sgc150q9' in line:
              ul90p_hrss = line.split()[4]
      load_file.close()
    except Exception, e:
      print(e)
      ul90p_hrss = 'NotReady'
    if ul90p_hrss == 'NotReady':
      sgc150q9_exclusion = 'NotReady'
    elif ul90p_hrss == 'NaN':
      sgc150q9_exclusion = 'NaN'
    elif float(ul90p_hrss) >= 0 :
      sgc150q9_exclusion = str(round(1.1e-18/150/float(ul90p_hrss),2))
    else:
      print "something wrong"
    try:
      file2 = '/home/grb.exttrig/Online/O2/processor/runs/X/GRB' + event + '/auto_web/' + event + '_online_openbox.shtml'
      html_file = open(file2)
      for num, line in enumerate(html_file):
          if 'Table of loudest surviving on-source events' in line:
             pointer = num
      html_file.close()
      html_file = open(file2)
      for i, line in enumerate(html_file):
          if i == pointer+6:
             table_row = line.strip()
             full_string = '<tr bgcolor="white"> <A HREF="./events/' + event + '_openbox_online_event_pass1/' + event + '_openbox_online_pass1.html">'
             if table_row.startswith('<tr bgcolor="white">'):
                table_elements = table_row.replace('<td>',' ').replace('</td>',' ').replace(full_string, '').replace('</A>','').replace('</A>','').replace('</tr>','')
                if len(table_elements.split()) == 22:
                   counter = 12
                else:
                   counter = 5
                loudest_sig = table_elements.split()[0]
                loudest_prob = table_elements.split()[1]
                loudest_theta = table_elements.split()[counter]
                loudest_phi = table_elements.split()[counter+1]
                loudest_peakgps = table_elements.split()[counter+2]
                loudest_peakfreq = table_elements.split()[counter+3]
                loudest_startgps = table_elements.split()[counter+4]
                loudest_duration = table_elements.split()[counter+5]
                loudest_flow = table_elements.split()[counter+6]
                loudest_fhigh = table_elements.split()[counter+7]
             else:
                loudest_prob = -2
      html_file.close()
      html_file = open(file2)
      theta_string = '<td> ' + loudest_theta + ' </td>'
      theta_stringr = '<td> ' + str(round(float(loudest_theta),4)) + ' </td>'
      phi_string = '<td> ' + loudest_phi + ' </td>'
      phi_stringr = '<td> ' + str(round(float(loudest_phi),4)) + ' </td>'
      i1 = []; j1 = []
      for i, line in enumerate(html_file):
           if theta_string in line:
              i1.append(i)
           elif theta_stringr in line:
              i1.append(i)
      html_file.close()
      html_file = open(file2)
      for j, line in enumerate(html_file):
           if phi_string in line:
              j1.append(j)
           elif phi_stringr in line:
              j1.append(j)
      for k in i1:
          if k+1 in j1:
           html_file = open(file2)
           for i, line in enumerate(html_file):
              if i == k-2:
                 loudest_ra = line.split()[1]
              if i == k-1:
                 loudest_dec = line.split()[1]
           html_file.close()
    except Exception, e:
      print(e)
    return sgc150q9_exclusion,loudest_sig,loudest_prob,loudest_ra,loudest_dec,loudest_peakgps,loudest_peakfreq,loudest_startgps,loudest_duration,loudest_flow,loudest_fhigh

def pygrb_only(event):
    try:
      loud_number_file = open('/home/grb.exttrig/Online/O2/processor/runs/CBC/GRB' + event + '/GRB' + event + '/post_processing/output/ONSOURCE/efficiency/loud_numbers.txt','r')
      for line in loud_number_file:
        loud_number = line.strip()
      loud_number_file.close()
    except Exception, e:
      print(e)
      loud_number = 'NotReady'
    try:
      nsns_exclusion_file = open('/home/grb.exttrig/Online/O2/processor/runs/CBC/GRB' + event + '/GRB' + event + '/post_processing/output/NSNS_FILTERED_30/efficiency_ONSOURCE/exclusion_distance_90.txt','r')
      for line in nsns_exclusion_file:
        nsns_exclusion = line.strip()
      nsns_exclusion_file.close()
    except Exception, e:
      print(e)
      nsns_exclusion = 'NotReady'
    try:
      nsbh_exclusion_file = open('/home/grb.exttrig/Online/O2/processor/runs/CBC/GRB' + event + '/GRB' + event + '/post_processing/output/NSBHPRECESS_FILTERED_30/efficiency_ONSOURCE/exclusion_distance_90.txt','r')
      for line in nsbh_exclusion_file:
        nsbh_exclusion = line.strip()
      nsbh_exclusion_file.close()
    except Exception, e:
      print(e)
      nsbh_exclusion = 'NotReady'
    return loud_number,nsns_exclusion,nsbh_exclusion

def non_analyzable(event):
    try:
      resstagrbfilea = open('known_results_status_O2.txt','a')
      resstagrbfilea.write(event + '\n')
      resstagrbfilea.close()
    except Exception, e:
      print(e)

def read_events_html(event):
    index = []; sig_gps = []; sig_m1 = []; sig_m2 = []; sig_mc = []; sig_ra = []; sig_dec = []; sig_snr = []
    try:
      file_name = '/home/grb.exttrig/Online/O2/processor/runs/CBC/GRB' + event + '/GRB' + event + '/post_processing/output/ONSOURCE/efficiency/loudest_events.html'
      html_file = open(file_name,'r')
      for i, line in enumerate(html_file):
          index.append(i)
      num_lines = len(index)
      html_file.close()
      html_file = open(file_name,'r')
      if num_lines == 35:
         for i, line in enumerate(html_file):
            if i == 21:
               sig_gps = round(float(line.strip().replace('<td>','').replace('</td>','')),2)
            elif i == 22:
               sig_m1 = round(float(line.strip().replace('<td>','').replace('</td>','')),2)
            elif i == 23:
               sig_m2 = round(float(line.strip().replace('<td>','').replace('</td>','')),2)
            elif i == 24:
               sig_mc = round(float(line.strip().replace('<td>','').replace('</td>','')),2)
            elif i == 25:
               sig_ra = round(float(line.strip().replace('<td>','').replace('</td>','')),2)
            elif i == 26:
               sig_dec = round(float(line.strip().replace('<td>','').replace('</td>','')),2)
            elif i == 27:
               sig_snr = round(float(line.strip().replace('<td>','').replace('</td>','')),2)
      elif num_lines == 37:
         for i, line in enumerate(html_file):
            if i == 22:
               sig_gps = round(float(line.strip().replace('<td>','').replace('</td>','')),2)
            elif i == 23:
               sig_m1 = round(float(line.strip().replace('<td>','').replace('</td>','')),2)
            elif i == 24:
               sig_m2 = round(float(line.strip().replace('<td>','').replace('</td>','')),2)
            elif i == 25:
               sig_mc = round(float(line.strip().replace('<td>','').replace('</td>','')),2)
            elif i == 26:
               sig_ra = round(float(line.strip().replace('<td>','').replace('</td>','')),2)
            elif i == 27:
               sig_dec = round(float(line.strip().replace('<td>','').replace('</td>','')),2)
            elif i == 28:
               sig_snr = round(float(line.strip().replace('<td>','').replace('</td>','')),2)
      else:
         print "More than 2 detectors in the network, fix me!"
      html_file.close()
    except Exception, e:
      print(e)
    return sig_gps,sig_m1,sig_m2,sig_mc,sig_ra,sig_dec,sig_snr

def write_CBC_sigonsource_circular(event,grb_name,fap,sig_gps,sig_m1,sig_m2,sig_mc,sig_ra,sig_dec,sig_snr):
    file_draft = open('/home/grb.exttrig/public_html/grb/online/O2/search/draft_circular/' + event + '-results.txt', 'w')
    file_draft.write(str('SUBJECT: LIGO/Virgo analysis: ') + grb_name + str(' online analysis') + '\n\n' + str('The online, coherent CBC pipeline (PyGRB) has made a preliminary identification of a GW candidate associated with the time and sky position of this GRB.') + '\n\n' + str('The candidate is a binary coalescence with the following main properties (preliminary values),') + '\n\n' + str('False Alarm Probability: ') + str(fap) + '\n' + str('Mass 1: ') + str(sig_m1) + str(' M_sun') + '\n' + str('Mass 2: ') + str(sig_m2) + str(' M_sun') + '\n' + str('Chirp Mass: ') + str(sig_mc) + str(' M_sun') + '\n' + str('SNR: ') + str(sig_snr) + '\n' + str('RA: ') + str(sig_ra) + str(' deg') + '\n' + str('DEC: ') + str(sig_dec) + str(' deg') + '\n' + str('GPS time: ') + str(sig_gps) + '\n\n' + str('More information can be found at this URL:') + '\n' + str('https://gracedb.ligo.org/events/') + event + '\n\n' + str('Further (offline) analysis is ongoing.') + '\n\n' + str('{YOUR_NAME} <{YOUR_EMAIL}> for the LIGO Scientific and Virgo Collaborations'))
    file_draft.close()

def write_Burst_sigonsource_circular(event,grb_name,loudest_prob,loudest_ra,loudest_dec,loudest_peakgps,loudest_peakfreq,loudest_startgps,loudest_duration,loudest_flow,loudest_fhigh):
    file_draft = open('/home/grb.exttrig/public_html/grb/online/O2/search/draft_circular/' + event + '-results.txt', 'w')
    file_draft.write(str('SUBJECT: LIGO/Virgo analysis: ') + grb_name + str(' online analysis') + '\n\n' + str('The online, coherent Burst pipeline (X-pipeline) has made a preliminary identification of a GW candidate associated with the time and sky position of this GRB.') + '\n\n' + str('The candidate is an unmodeled GW transient with the following main properties (preliminary values),') + '\n\n' + str('False Alarm Probability: ') + str(loudest_prob) + '\n' + str('Peak frequency: ') + loudest_peakfreq + str(' Hz') + str(' (f_low - f_high: ') + loudest_flow + str(' - ') + loudest_fhigh + str(' Hz)') + '\n' + str('GPS peak time: ') + loudest_peakgps + str(' (GPS start time: ') + loudest_startgps + str(')') + '\n' + str('Duration: ') + loudest_duration + str(' ms') + '\n' + str('RA: ') + loudest_ra + str(' deg') + '\n' + str('DEC: ') + loudest_dec + str(' deg') + '\n\n' + str('More information can be found at this URL:') + '\n' + str('https://gracedb.ligo.org/events/') + event + '\n\n' + str('Further (offline) analysis is ongoing.') + '\n\n' + str('{YOUR_NAME} <{YOUR_EMAIL}> for the LIGO Scientific and Virgo Collaborations'))
    file_draft.close()

def write_CBC_and_Burst_sigonsource_circular(event,grb_name,fap,sig_gps,sig_m1,sig_m2,sig_mc,sig_ra,sig_dec,sig_snr,loudest_prob,loudest_ra,loudest_dec,loudest_peakgps,loudest_peakfreq,loudest_startgps,loudest_duration,loudest_flow,loudest_fhigh):
    file_draft = open('/home/grb.exttrig/public_html/grb/online/O2/search/draft_circular/' + event + '-results.txt', 'w')
    file_draft.write(str('SUBJECT: LIGO/Virgo analysis: ') + grb_name + str(' online analysis') + '\n\n' + str('The online, coherent CBC pipeline (PyGRB) and coherent Burst pipeline (X-pipeline) have made preliminary identification of GW candidate associated with the time and sky position of this GRB.') + '\n\n' + str('The candidate of a binary coalescence has the following main properties (preliminary values),') + '\n\n' + str('False Alarm Probability: ') + str(fap) + '\n' + str('Mass 1: ') + str(sig_m1) + str(' M_sun') + '\n' + str('Mass 2: ') + str(sig_m2) + str(' M_sun') + '\n' + str('Chirp Mass: ') + str(sig_mc) + str(' M_sun') + '\n' + str('SNR: ') + str(sig_snr) + '\n' + str('RA: ') + str(sig_ra) + str(' deg') + '\n' + str('DEC: ') + str(sig_dec) + str(' deg') + '\n' + str('GPS time: ') + str(sig_gps) + '\n\n' + str('The candidate of an unmodeled GW transient has the following main properties (preliminary values),') + '\n\n' + str('False Alarm Probability: ') + str(loudest_prob) + '\n' + str('Peak frequency: ') + loudest_peakfreq + str(' Hz') + str(' (f_low - f_high: ') + loudest_flow + str(' - ') + loudest_fhigh + str(' Hz)') + '\n' + str('GPS peak time: ') + loudest_peakgps + str(' (GPS start time: ') + loudest_startgps + str(')') + '\n' + str('Duration: ') + loudest_duration + str(' ms') + '\n' + str('RA: ') + loudest_ra + str(' deg') + '\n' + str('DEC: ') + loudest_dec + str(' deg') + '\n\n' + str('More information can be found at this URL:') + '\n' + str('https://gracedb.ligo.org/events/') + event + '\n\n' + str('Further (offline) analysis is ongoing.') + '\n\n' + str('{YOUR_NAME} <{YOUR_EMAIL}> for the LIGO Scientific and Virgo Collaborations'))
    file_draft.close()
        
def write_CBC_exclusion_circular(event,grb_name,fap,nsns_exclusion,nsbh_exclusion):
    file_draft = open('/home/grb.exttrig/public_html/grb/online/O2/search/draft_circular/' + event + '-results.txt', 'w') 
    file_draft.write(str('SUBJECT: LIGO/Virgo analysis: ') + grb_name + str(' online analysis') + '\n\n' + str('The online, coherent CBC pipeline (PyGRB) did not find a candidate GW event associated with this GRB. Preliminary exclusion distances:') + '\n\n' + str('NS-NS: ') + str(nsns_exclusion) + str(' Mpc, 90% CL') + '\n' + str('NS-BH: ') + str(nsbh_exclusion) + str(' Mpc, 90% CL') + '\n\n' + str('More information can be found at this URL:') + '\n' + str('https://gracedb.ligo.org/events/') + event + '\n\n' + str('Further (offline) analysis is ongoing.') + '\n\n' + str('{YOUR_NAME} <{YOUR_EMAIL}> for the LIGO Scientific and Virgo Collaborations'))
    file_draft.close()

def write_Burst_exclusion_circular(event,grb_name,loudest_prob,sgc150q9_exclusion):
    file_draft = open('/home/grb.exttrig/public_html/grb/online/O2/search/draft_circular/' + event + '-results.txt', 'w')
    file_draft.write(str('SUBJECT: LIGO/Virgo analysis: ') + grb_name + str(' online analysis') + '\n\n' + str('The online, coherent Burst pipeline (X-pipeline) did not find a candidate GW event associated with this GRB. Preliminary exclusion distance:') + '\n\n' + str('Burst: ') + str(sgc150q9_exclusion) + str(' Mpc, 90% CL') + '\n\n' + str('More information can be found at this URL:') + '\n' + str('https://gracedb.ligo.org/events/') + event + '\n\n' + str('Further (offline) analysis is ongoing.') + '\n\n' + str('{YOUR_NAME} <{YOUR_EMAIL}> for the LIGO Scientific and Virgo Collaborations'))
    file_draft.close()

def write_CBC_and_Burst_exclusion_circular(event,grb_name,fap,nsns_exclusion,nsbh_exclusion,loudest_prob,sgc150q9_exclusion):
    file_draft = open('/home/grb.exttrig/public_html/grb/online/O2/search/draft_circular/' + event + '-results.txt', 'w')
    file_draft.write(str('SUBJECT: LIGO/Virgo analysis: ') + grb_name + str(' online analysis') + '\n\n' + str('The online, coherent CBC pipeline (PyGRB) and coherent Burst pipeline (X-pipeline) did not find a candidate GW event associated with this GRB. Preliminary exclusion distances:') + '\n\n' + str('NS-NS: ') + str(nsns_exclusion) + str(' Mpc, 90% CL') + '\n' + str('NS-BH: ') + str(nsbh_exclusion) + str(' Mpc, 90% CL') + '\n' + str('Burst: ') + str(sgc150q9_exclusion) + str(' Mpc, 90% CL') + '\n\n' + str('More information can be found at this URL:') + '\n' + str('https://gracedb.ligo.org/events/') + event + '\n\n' + str('Further (offline) analysis is ongoing.') + '\n\n' + str('{YOUR_NAME} <{YOUR_EMAIL}> for the LIGO Scientific and Virgo Collaborations'))
    file_draft.close() 

while True:
  noframesX = []
  datacutX = []
  with open("monitor_status_O2.log") as f:
       for line in f:
           if "NOFRAMES" in line:
              noframesX.append(line.split()[0])
           else:
              print "analysis ongoing"
  with open("processedjobs_O2.log") as g:
       for line in g:
           if "DATACUT" in line:
              datacutX.append(line.split()[0])
           else:
              print "analysis ongoing"
  #print str(noframesX)
  #print str(datacutX)

  longgrbCBC = []
  noframesCBC = []
  datacutCBC = []
  with open("monitor_status_cohptf_O2.log") as f:
       for line in f:
           if "LONGGRB" in line:
              longgrbCBC.append(line.split()[0])
           elif "NOFRAMES" in line:
              noframesCBC.append(line.split()[0])
           else:
              print "analysis ongoing"
  with open("processedjobs_cohptf_O2.log") as g:
       for line in g:
           if "DATACUT" in line:
              datacutCBC.append(line.split()[0])
           else:
              print "analysis ongoing"
  #print str(longgrbCBC)
  #print str(noframesCBC)
  #print str(datacutCBC)

  grbnow = []
  grbfile = open('notes_dates_O2.txt','r')
  for lines in grbfile:
      grblines = lines.strip()
      grbnow.append(grblines)
  print grbnow
  grbfile.close()

  grbdone = []
  resstagrbfiler = open('known_results_status_O2.txt','r')
  for lines in resstagrbfiler:
      grblines = lines.strip()
      grbdone.append(grblines)
  print grbdone
  resstagrbfiler.close()

  unmatched = set(grbnow).symmetric_difference(set(grbdone))
  unmatched = list(unmatched)
  print unmatched

  if not unmatched:
     print "1st loop sleep : %s" % time.ctime()
     time.sleep(300)
  else:
     for item in unmatched:
       if item in noframesX and item in noframesCBC:
          print "noframesX and noframesCBC: %s" % item
          non_analyzable(item)
       elif item in noframesX and item in datacutCBC:
          print "noframesX and datacutCBC: %s" % item
          non_analyzable(item)
       elif item in noframesX and item in longgrbCBC:
          print "noframesX and longgrbCBC: %s" % item
          non_analyzable(item)
       elif item in noframesX and item not in noframesCBC and item not in datacutCBC and item not in longgrbCBC:
          print "PyGRB only result: %s" % item          
          loud_number,nsns_exclusion,nsbh_exclusion = pygrb_only(item)
          if loud_number == 'NotReady' or nsns_exclusion == 'NotReady' or nsbh_exclusion == 'NotReady':
             print "Results are not ready"
          elif float(loud_number) >= 0 and float(loud_number) <= 0.01:
             print "Loud on-source event"
             try:
                gpstime,grb_name = get_event_gps(item)
                sig_gps,sig_m1,sig_m2,sig_mc,sig_ra,sig_dec,sig_snr = read_events_html(item) 
                write_CBC_sigonsource_circular(item,grb_name,round(float(loud_number),3),sig_gps,sig_m1,sig_m2,sig_mc,sig_ra,sig_dec,sig_snr)
                annotate_gracedb(item)
                resstagrbfilea = open('known_results_status_O2.txt','a')
                resstagrbfilea.write(item + '\n')
                resstagrbfilea.close()
             except Exception, e:
                print(e)
          elif float(loud_number) < 0 or float(loud_number) > 0.01:
             print "Exclusion distance ready"
             try:
                gpstime,grb_name = get_event_gps(item)
                write_CBC_exclusion_circular(item,grb_name,round(float(loud_number),3),round(float(nsns_exclusion),2),round(float(nsbh_exclusion),2))
                annotate_gracedb(item)
                resstagrbfilea = open('known_results_status_O2.txt','a')
                resstagrbfilea.write(item + '\n')
                resstagrbfilea.close()
             except Exception, e:
                print(e)
          else:
             print "Unknown situation"
       elif item in datacutX  and item in noframesCBC:       
          print "datacutX  and noframesCBC: %s" % item
          non_analyzable(item)
       elif item in datacutX and item in datacutCBC:
          print "datacutX and datacutCBC: %s" % item
          non_analyzable(item)
       elif item in datacutX and item in longgrbCBC:
          print "datacutX and longgrbCBC: %s" % item
          non_analyzable(item)
       elif item in datacutX and item not in noframesCBC and item not in datacutCBC and item not in longgrbCBC:
          print "PyGRB only result: %s" % item
          loud_number,nsns_exclusion,nsbh_exclusion = pygrb_only(item)
          if loud_number == 'NotReady' or nsns_exclusion == 'NotReady' or nsbh_exclusion == 'NotReady':
             print "Results are not ready"
          elif float(loud_number) >= 0 and float(loud_number) <= 0.01:
             print "Loud on-source event"
             try:
                gpstime,grb_name = get_event_gps(item)
                sig_gps,sig_m1,sig_m2,sig_mc,sig_ra,sig_dec,sig_snr = read_events_html(item)
                write_CBC_sigonsource_circular(item,grb_name,round(float(loud_number),3),sig_gps,sig_m1,sig_m2,sig_mc,sig_ra,sig_dec,sig_snr)
                annotate_gracedb(item)
                resstagrbfilea = open('known_results_status_O2.txt','a')
                resstagrbfilea.write(item + '\n')
                resstagrbfilea.close()
             except Exception, e:
                print(e)
          elif float(loud_number) < 0 or float(loud_number) > 0.01:
             print "Exclusion distance ready"
             try:
                gpstime,grb_name = get_event_gps(item)
                write_CBC_exclusion_circular(item,grb_name,round(float(loud_number),3),round(float(nsns_exclusion),2),round(float(nsbh_exclusion),2))
                annotate_gracedb(item)
                resstagrbfilea = open('known_results_status_O2.txt','a')
                resstagrbfilea.write(item + '\n')
                resstagrbfilea.close()
             except Exception, e:
                print(e)
          else:
             print "Unknown situation"
       elif item in noframesCBC and item not in noframesX and item not in datacutX:
          print "X-pipeline only result: %s" % item
          sgc150q9_exclusion,loudest_sig,loudest_prob,loudest_ra,loudest_dec,loudest_peakgps,loudest_peakfreq,loudest_startgps,loudest_duration,loudest_flow,loudest_fhigh = xpipeline_only(item)
          if sgc150q9_exclusion == 'NotReady':
             print "Results are not ready"
          elif float(loudest_prob) >= 0 and float(loudest_prob) <= 0.01:
             print "Loud on-source event"
             try:
                gpstime,grb_name = get_event_gps(item)
                write_Burst_sigonsource_circular(item,grb_name,round(float(loudest_prob),3),loudest_ra,loudest_dec,loudest_peakgps,loudest_peakfreq,loudest_startgps,loudest_duration,loudest_flow,loudest_fhigh)
                annotate_gracedb(item)
                resstagrbfilea = open('known_results_status_O2.txt','a')
                resstagrbfilea.write(item + '\n')
                resstagrbfilea.close()
             except Exception, e:
                print(e)
          elif float(loudest_prob) < 0 or float(loudest_prob) > 0.01: 
             print "Exclusion distance ready"
             try:
                gpstime,grb_name = get_event_gps(item)
                write_Burst_exclusion_circular(item,grb_name,round(float(loudest_prob),3),sgc150q9_exclusion)                
                annotate_gracedb(item)
                resstagrbfilea = open('known_results_status_O2.txt','a')
                resstagrbfilea.write(item + '\n')
                resstagrbfilea.close()
             except Exception, e:
                print(e)
          else: 
             print "Unknown situation" 
       elif item in datacutCBC and item not in noframesX and item not in datacutX:
          print "X-pipeline only result: %s" % item
          sgc150q9_exclusion,loudest_sig,loudest_prob,loudest_ra,loudest_dec,loudest_peakgps,loudest_peakfreq,loudest_startgps,loudest_duration,loudest_flow,loudest_fhigh = xpipeline_only(item)
          if sgc150q9_exclusion == 'NotReady':
             print "Results are not ready"
          elif float(loudest_prob) >= 0 and float(loudest_prob) <= 0.01:
             print "Loud on-source event"
             try:
                gpstime,grb_name = get_event_gps(item)
                write_Burst_sigonsource_circular(item,grb_name,round(float(loudest_prob),3),loudest_ra,loudest_dec,loudest_peakgps,loudest_peakfreq,loudest_startgps,loudest_duration,loudest_flow,loudest_fhigh)
                annotate_gracedb(item)
                resstagrbfilea = open('known_results_status_O2.txt','a')
                resstagrbfilea.write(item + '\n')
                resstagrbfilea.close()
             except Exception, e:
                print(e)
          elif float(loudest_prob) < 0 or float(loudest_prob) > 0.01:
             print "Exclusion distance ready"
             try:
                gpstime,grb_name = get_event_gps(item)
                write_Burst_exclusion_circular(item,grb_name,round(float(loudest_prob),3),sgc150q9_exclusion)
                annotate_gracedb(item)
                resstagrbfilea = open('known_results_status_O2.txt','a')
                resstagrbfilea.write(item + '\n')
                resstagrbfilea.close()
             except Exception, e:
                print(e)
          else:
             print "Unknown situation"
       elif item in longgrbCBC and item not in noframesX and item not in datacutX:
          print "X-pipeline only result: %s" % item
          sgc150q9_exclusion,loudest_sig,loudest_prob,loudest_ra,loudest_dec,loudest_peakgps,loudest_peakfreq,loudest_startgps,loudest_duration,loudest_flow,loudest_fhigh = xpipeline_only(item)
          if sgc150q9_exclusion == 'NotReady':
             print "Results are not ready"
          elif float(loudest_prob) >= 0 and float(loudest_prob) <= 0.01:
             print "Loud on-source event"
             try:
                gpstime,grb_name = get_event_gps(item)
                write_Burst_sigonsource_circular(item,grb_name,round(float(loudest_prob),3),loudest_ra,loudest_dec,loudest_peakgps,loudest_peakfreq,loudest_startgps,loudest_duration,loudest_flow,loudest_fhigh)
                annotate_gracedb(item)
                resstagrbfilea = open('known_results_status_O2.txt','a')
                resstagrbfilea.write(item + '\n')
                resstagrbfilea.close()
             except Exception, e:
                print(e)
          elif float(loudest_prob) < 0 or float(loudest_prob) > 0.01:
             print "Exclusion distance ready"
             try:
                gpstime,grb_name = get_event_gps(item)
                write_Burst_exclusion_circular(item,grb_name,round(float(loudest_prob),3),sgc150q9_exclusion)
                annotate_gracedb(item)
                resstagrbfilea = open('known_results_status_O2.txt','a')
                resstagrbfilea.write(item + '\n')
                resstagrbfilea.close()
             except Exception, e:
                print(e)
          else:
             print "Unknown situation"
       elif item not in noframesX and item not in datacutX and item not in noframesCBC and item not in datacutCBC and item not in longgrbCBC:
          print "X-pipeline and PyGRB results: %s" % item
          try:
             gpstime,grb_name = get_event_gps(item)
             loud_number,nsns_exclusion,nsbh_exclusion = pygrb_only(item)
             sgc150q9_exclusion,loudest_sig,loudest_prob,loudest_ra,loudest_dec,loudest_peakgps,loudest_peakfreq,loudest_startgps,loudest_duration,loudest_flow,loudest_fhigh = xpipeline_only(item)
             if sgc150q9_exclusion == 'NotReady' or loud_number == 'NotReady':
                print "Results are not ready"    
             elif (float(loudest_prob) >= 0 and float(loudest_prob) <= 0.01) and (float(loud_number) < 0 or float(loud_number) > 0.01):
                write_Burst_sigonsource_circular(item,grb_name,round(float(loudest_prob),3),loudest_ra,loudest_dec,loudest_peakgps,loudest_peakfreq,loudest_startgps,loudest_duration,loudest_flow,loudest_fhigh) 
                annotate_gracedb(item)
                resstagrbfilea = open('known_results_status_O2.txt','a')
                resstagrbfilea.write(item + '\n')
                resstagrbfilea.close()
             elif (float(loud_number) >= 0 and float(loud_number) <= 0.01) and (float(loudest_prob) < 0 or float(loudest_prob) > 0.01):
                sig_gps,sig_m1,sig_m2,sig_mc,sig_ra,sig_dec,sig_snr = read_events_html(item)
                write_CBC_sigonsource_circular(item,grb_name,round(float(loud_number),3),sig_gps,sig_m1,sig_m2,sig_mc,sig_ra,sig_dec,sig_snr)
                annotate_gracedb(item)
                resstagrbfilea = open('known_results_status_O2.txt','a')
                resstagrbfilea.write(item + '\n')
                resstagrbfilea.close()
             elif (float(loudest_prob) >= 0 and float(loudest_prob) <= 0.01) and (float(loud_number) >= 0 and float(loud_number) <= 0.01):
                sig_gps,sig_m1,sig_m2,sig_mc,sig_ra,sig_dec,sig_snr = read_events_html(item)
                write_CBC_and_Burst_sigonsource_circular(item,grb_name,round(float(loud_number),3),sig_gps,sig_m1,sig_m2,sig_mc,sig_ra,sig_dec,sig_snr,round(float(loudest_prob),3),loudest_ra,loudest_dec,loudest_peakgps,loudest_peakfreq,loudest_startgps,loudest_duration,loudest_flow,loudest_fhigh)
                annotate_gracedb(item)
                resstagrbfilea = open('known_results_status_O2.txt','a')
                resstagrbfilea.write(item + '\n')
                resstagrbfilea.close()
             elif (float(loudest_prob) < 0 or float(loudest_prob) > 0.01) and (float(loud_number) < 0 or float(loud_number) > 0.01):
                write_CBC_and_Burst_exclusion_circular(item,grb_name,round(float(loud_number),3),round(float(nsns_exclusion),2),round(float(nsbh_exclusion),2),round(float(loudest_prob),3),sgc150q9_exclusion)
                annotate_gracedb(item)
                resstagrbfilea = open('known_results_status_O2.txt','a')
                resstagrbfilea.write(item + '\n')
                resstagrbfilea.close()
             else:
                print "Unknown situation"
          except Exception, e:
             print(e)
       else:
          print "Status Unknown"


  print "Sleep : %s" % time.ctime()
  time.sleep(300)
