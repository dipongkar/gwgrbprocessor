#!/usr/bin/perl -w

require '/home/grb.exttrig/Online/O2/processor/exttrig_utils.pl';
require '/home/grb.exttrig/Online/O2/processor/exttrig_params.pl';

#=== Get user name ===#
$USERNAME = `whoami`;
chomp($USERNAME);

#=== Specify local working directories ===#
$HOMEDIR          = sprintf "/home/%s", $USERNAME;
$SCRIPTSDIR       = sprintf "%s/Online/%s/processor", $HOMEDIR, $LIGORUN;
$GRBDIR           = sprintf "/%s/grbs", $SCRIPTSDIR, $LIGORUN;
$JOBSDIR          = sprintf "%s/runs/CBC", $SCRIPTSDIR;
$LOGPATH          = sprintf "/usr1/%s/log", $USERNAME;
$PUBLICDIR        = sprintf "%s/public_html/grb/online/%s/search/notes", $HOMEDIR, $LIGORUN;
$PARAMSDIR        = sprintf "%s/params/CBC", $SCRIPTSDIR;
$HTML_DIR         = sprintf "%s/public_html/grb/online/%s", $HOMEDIR, $LIGORUN;
#=== Specify input and log files ===#
$currentGrbFile   = sprintf "%s/grbingracedb_%s.txt", $GRBDIR, $LIGORUN;             #[[[???]]]          
$statusFile       = sprintf "%s/monitor_status_cohptf_%s.log", $SCRIPTSDIR, $LIGORUN;
$tempFile         = sprintf "%s/monitor_status_cohptf_%s_temp.log", $SCRIPTSDIR, $LIGORUN;
$notesListFile    = sprintf "%s/notes_dates_cohptf_%s.txt", $SCRIPTSDIR, $LIGORUN;        #[[[???]]] 

$MAINURL          = sprintf "%s/~%s/web/%s/OnlineGRB_page_%s.html", $PUBSERVER, $USERNAME, $LIGORUN, $LIGORUN;
#$ANALYSIS_FILE    = sprintf "analysis_o1.ini";
#$VETO_FILE        = sprintf "data_o1.ini";
#$DATA_FILE        = sprintf "online_o1.ini";
#$INJ_FILE         = sprintf "injections_o1.ini";
#$PP_FILE          = sprintf "postprocessing_o1.ini";
#$TEMPLATEBANKFILE = sprintf "H1-TMPLTBANK_GRB100928A_DATAFIND-969673046-4992.xml";

#=== Some shortcut ===#
$gridcmd2 = " --gps-start-time ";
$gridcmd3 = " --gps-end-time ";
$gridcmd4 = " --url-type file";

#=== Open input file with processed GRBs ===#
$processedGrbFile = sprintf "%s/processedgrbs_strain_cohptf_%s.txt", $SCRIPTSDIR, $LIGORUN;
printf "$processedGrbFile\n";

$SEARCHDURATION = $SEGDURATION_CBC;

#=== Minumum number of frames required ===#
$NFRAMESMIN    = int($SEGDURATION_CBC/$FRAMELEN);
#$NFRAMESMINV = int($SEGDURATION_CBC/$FRAMELENV);

##NEW
$SEGDURATION_CBC_NEW = 272;
$SEGDURATIONLEFT_NEW = 77;
$SEGDURATIONRIGHT_NEW = 73;
$NFRAMESMIN_NEW    = int($SEGDURATION_CBC_NEW/$FRAMELEN);
##NEW

#=== Set start time ===#
#$currentTime  = time;
$currentDelay = $TIMEDELAY + 1;

#=== Set initial timestamp of GRB file ===#
$oldStampGrb = 0;

#=== Unset condor flag ===#
$condorFlag = 0;
use POSIX;

while (1) {

  #=== If ten minutes have elapsed since last scp ===#
  if ($currentDelay >= $TIMEDELAY) {

    #=== Update time of scp ===#
    $previousTime = time;
    $timeString = localtime $previousTime;

    my($sec,$min,$hour,$day,$mon,$year,$wday,$yday,$isdst) = localtime $previousTime;

    $mon  = 1 + $mon;
    $year = 1900 + $year - 2000;

    #=== Get current time in GPS ===#
    $nowGPSFloat = `lalapps_tconvert now`;
    chomp($nowGPSFloat);
    $nowGPS = int($nowGPSFloat);
#    $nowGPS = 1058716992; 

    #=== Open output log file ===#
    $logFile = sprintf "%s/processgrb_strain_cohptf_%s_%02d%02d.log", $SCRIPTSDIR, $LIGORUN, $year, $mon;

    open LOGFILE, ">>$logFile"
      or die "Error opening file $logFile: $!";

    select LOGFILE;
    $| = 1;
    select STDOUT;

    if ($oldStampGrb == 0) {
      printf LOGFILE "Starting processGrb script on %s\n", $timeString;
    } else {
      printf LOGFILE "Starting new trigger check on %s\n", $timeString;
    }

    #=== Read input processed GRBs file ===#
    if (-e $processedGrbFile) {
      open PROCESSEDGRB, "<$processedGrbFile"
        or die "Error opening input log file $processedGrbFile: $!";
      chomp(@processedGrbs = <PROCESSEDGRB>);
      close PROCESSEDGRB;
    } else {
      @processedGrbs = ();
    }

    #=== Open output file with processed GRBs ===#
    open PROCESSEDGRB, ">>$processedGrbFile"
      or die "Error opening output log file $processedGrbFile: $!";

     select PROCESSEDGRB;
     $| = 1;

    #=== Open output file with list of GRBs with notes ===#
    open NOTESFILE, ">>$notesListFile"
      or die "Error opening output notes list file $notesListFile: $!";

    select NOTESFILE;
    $| = 1;

    select STDOUT;

    #=== If GRB file exists ===#
    if (-e $currentGrbFile) {

      #=== Get current time stamp ===#
      $currentStampGrb = (stat($currentGrbFile))[9];

        #=== Update timestamp variable ===#
        $oldStampGrb = $currentStampGrb;

        #=== Open GRB file ===#
        open GRBFILE, "<$currentGrbFile"
          or die "Error opening input GRB file $currentGrbFile: $!";

        #=== Read all lines from GRB file ===#
        #chomp(@inputLinesAll = <GRBFILE>);
        chomp(@inputLinesAll = reverse <GRBFILE>);
        close GRBFILE;

        #======================================================================#
        #                          Loop through GRBs                           #
        #======================================================================#

        $gctr = 0;
        @grbNameV       = ();
        @grbGPSV        = (); 
        @grbDateV       = ();
        @grbTimeV       = ();
        @grbHttpV       = ();
        @grbRAV         = ();
        @grbDecV        = ();
        @grbErrorV      = ();
        @grbTrigDurV    = ();
        @grbSatV        = ();
        @grbInsV        = ();
        foreach $inputLine (@inputLinesAll) {

          #=== Skip comment lines ===#
          if ($inputLine =~ /\#/) {
            next;
          }

          if ($inputLine =~ /^(\S+)\s+External\s+GRB\s+(\S+)\s+(\S+)\s+(\S+)\s+UTC\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+Satellite,\s+(\S+)\s+Instrument\s*$/) {
            $grbNameV[$gctr]    = $1;
            $grbGPSV[$gctr]     = $2;
            $grbDateV[$gctr]    = $3;
            $grbTimeV[$gctr]    = $4;
            $grbHttpV[$gctr]    = $5;
            $grbRAV[$gctr]      = $6;
            $grbDecV[$gctr]     = $7;
            $grbErrorV[$gctr]   = $8;
            $grbTrigDurV[$gctr] = $9;
            $grbSatV[$gctr]     = $10;
            $grbInsV[$gctr]     = $11;
          } else {
            printf LOGFILE "Error reading GRB file:  $inputLine\n";
            next;
          }

          #=== Don't analyze old GRBs ===#
          if ($grbGPSV[$gctr] < $MINGRBDATE) {
            next;
          }

          #=== Dont analyze GRBs with really large position error boxes ===#
          if ($grbSatV[$gctr] eq 'Fermi') {
            if ($grbErrorV[$gctr] > $FERMIERRORMAX) {
              next;
            }
          }

          $processedGrbFlag = 0;
          #=== Loop through processed GRBs ===#
          foreach $processedGrb (@processedGrbs) {

            #=== If this GRB has been previously processed ===#
            if ($processedGrb eq $grbNameV[$gctr]) {

              #=== Set processed GRB flag and exit processed GRB loop ===#
              $processedGrbFlag = 1;
              last;
            }
          }

          #=== If this GRB has been previously processed ===#
          if ($processedGrbFlag) {

            #=== Read next GRB ===#
            next;
          }
          $gctr++;
        }


        #======================================================================#
        #                       End loop through GRBs                          #
        #======================================================================#


        $i      = 0;
        $gcount = $gctr;
        for ($gctr = 0; $gctr < $gcount; $gctr++) {
 
          $grbName    = $grbNameV[$gctr];
          $grbGPS     = $grbGPSV[$gctr];
          $grbGPS     = ceil($grbGPS);
          $grbDate    = $grbDateV[$gctr];
          $grbTime    = $grbTimeV[$gctr];
          $grbHttp    = $grbHttpV[$gctr];
          $grbRA      = $grbRAV[$gctr];
          $grbDec     = $grbDecV[$gctr];
          $grbError   = $grbErrorV[$gctr];
          $grbSat     = $grbSatV[$gctr];
          $grbTrigDur = $grbTrigDurV[$gctr];

        if ($grbSat eq 'Fermi' && $gctr < $gcount - 1) {
          if (($grbSatV[$gctr-1] eq 'Swift' && abs($grbGPS-$grbGPSV[$gctr-1]) < 300) or ($grbSatV[$gctr+1] eq 'Swift' && abs($grbGPSV[$gctr+1]-$grbGPS) < 300)) {
             next;
          }
        }



  printf "%s %s %s %s %10.0f %s %s %s %s %4.5f %4.5f %3.2f %s\n",
          $grbName, 'External', 'GRB', 'None', $grbGPS, $grbDate, $grbTime, 'UTC', $grbHttp, $grbRA, $grbDec, $grbError, $grbSat;

          #=== Unset condor flag ===#
          $condorFlag = 0;

          #=== Specify default status for web monitor ===#
          $ifoString  = '--';
          $jobStatus  = 'DATACUT';
          $rescueCtr  = 0;
          $jobCluster = 0;
          $jobRunTime = '0+00:00:00';

          $gpsTimeNow    = `lalapps_tconvert now`;
          $latency = ($gpsTimeNow - $grbGPS)/60;
          $latency = sprintf("%.2f",$latency);

          select STDOUT;

          $gpsStart = $grbGPS - $SEGDURATIONLEFT_CBC;
          $gpsEnd   = $gpsStart + $SEGDURATION_CBC;

##NEW
          $gpsStart_new_1 = $grbGPS - $SEGDURATIONLEFT_NEW;
          $gpsEnd_new_1   = $gpsStart_new_1 + $SEGDURATION_CBC_NEW;

          $gpsEnd_new_2 = $grbGPS + $SEGDURATIONRIGHT_NEW;
          $gpsStart_new_2  = $gpsEnd_new_2 - $SEGDURATION_CBC_NEW;
 
          $optionFlagH1 = -1;
          $optionFlagL1 = -1;
##NEW

          #=== Find LHO frames ===#
          while (1) {
            $OBSERVATORY = "H";
            $gridcmd1 = "gw_data_find --server=".$DATASERVER." --observatory ".$OBSERVATORY." --type H1_".$FRAMETYPE;
            $command = $gridcmd1.$gridcmd2.$gpsStart.$gridcmd3.$gpsEnd.$gridcmd4;
            printf LOGFILE "GRB %s:  Running gw_data_find:  %s\n", $grbName, $command;
    
             @frames = ();
             @frames = `$command`;
             chomp(@frames);

            #=== If no frame files found ===#
            if ($#frames + 1 == 0) {
              printf LOGFILE "GRB %s:  No frame files found for LHO!\n", $grbName;
              last;
            } else {

              printf LOGFILE "GRB %s:  %d frame files found for LHO.\n", $grbName, $#frames + 1;

              #=== If not enough frame files found ===#
              if ($#frames + 1 < $NFRAMESMIN) {
     
                #=== Get current GPS seconds ===#
                $currentGps = `lalapps_tconvert now`;
                $gpsDiff = $currentGps - $grbGPS;

                $gpsTimeNow    = `lalapps_tconvert now`;
                $latency = ($gpsTimeNow - $grbGPS)/60;
                $latency = sprintf("%.2f",$latency);

                #=== If less than two hours have elapsed since GRB trigger time ===#
                if ($gpsDiff < $DATADELAY_CBC) {
                  printf LOGFILE "GRB %s:  Waiting for more LHO data; sleeping for %.3f seconds.\n", $grbName, $TIMEDELAY;
                  #sleep $DATADELAY_CBC - $gpsDiff;
                  sleep $TIMEDELAY;
                } else {
                  printf LOGFILE "GRB %s:  Not enough frame files found for LHO.\n", $grbName;
##NEW

                  printf LOGFILE "GRB %s:  Checking for Least required files for LHO - option 1.\n", $grbName;
                  $OBSERVATORY = "H";
                  $gridcmd1 = "gw_data_find --server=".$DATASERVER." --observatory ".$OBSERVATORY." --type H1_".$FRAMETYPE;
                  $command1 = $gridcmd1.$gridcmd2.$gpsStart_new_1.$gridcmd3.$gpsEnd_new_1.$gridcmd4;
                  printf LOGFILE "GRB %s: Least Running gw_data_find:  %s\n", $grbName, $command1;
                   @frames1 = ();
                   @frames1 = `$command1`;
                    chomp(@frames1);
                    printf LOGFILE "GRB %s:  %d Least frame files found for LHO - option 1.\n", $grbName, $#frames1 + 1;
                    if ($#frames1 + 1 >= $NFRAMESMIN_NEW) {
                    $optionFlagH1 = 1;
                    }

                  printf LOGFILE "GRB %s:  Checking for Least required files for LHO - option 2.\n", $grbName;
                  $OBSERVATORY = "H";
                  $gridcmd1 = "gw_data_find --server=".$DATASERVER." --observatory ".$OBSERVATORY." --type H1_".$FRAMETYPE;
                  $command2 = $gridcmd1.$gridcmd2.$gpsStart_new_2.$gridcmd3.$gpsEnd_new_2.$gridcmd4;
                  printf LOGFILE "GRB %s: Least Running gw_data_find:  %s\n", $grbName, $command2;
                   @frames2 = ();
                   @frames2 = `$command2`;
                    chomp(@frames2);
                    printf LOGFILE "GRB %s:  %d Least frame files found for LHO - option 2.\n", $grbName, $#frames2 + 1; 
                    if ($#frames2 + 1 >= $NFRAMESMIN_NEW) {
                    $optionFlagH1 = 2;
                    } 

                    @frames = ();
                    if ($#frames2 > $#frames1){
                    @frames = @frames2;
                    } else {
                    @frames = @frames1;
                    }
##NEW

                  last;
                }
              } else {
                last;
              }
            }
          }
          $nFramesH1 = $#frames + 1;


          while (1) {
            $OBSERVATORY = "L";
            $gridcmd1 = "gw_data_find --server=".$DATASERVER." --observatory ".$OBSERVATORY." --type L1_".$FRAMETYPE;
            $command = $gridcmd1.$gridcmd2.$gpsStart.$gridcmd3.$gpsEnd.$gridcmd4;
            printf LOGFILE "GRB %s:  Running gw_data_find:  %s\n", $grbName, $command;

            @frames = ();
            @frames = `$command`;
            chomp(@frames);

            #=== If no frame files found ===#
            if ($#frames + 1 == 0) {
              printf LOGFILE "GRB %s:  No frame files found for LLO!\n", $grbName;
              last;
            } else {

              printf LOGFILE "GRB %s:  %d frame files found for LLO.\n", $grbName, $#frames + 1;

              #=== If not enough frame files found ===#
              if ($#frames + 1 < $NFRAMESMIN) {
     
                #=== Get current GPS seconds ===#
                $currentGps = `lalapps_tconvert now`;
                $gpsDiff = $currentGps - $grbGPS;

                $gpsTimeNow    = `lalapps_tconvert now`;
                $latency = ($gpsTimeNow - $grbGPS)/60;
                $latency = sprintf("%.2f",$latency);

                #=== If less than two hours have elapsed since GRB trigger time ===#
                if ($gpsDiff < $DATADELAY_CBC) {
                  printf LOGFILE "GRB %s:  Waiting for more LLO data; sleeping for %.3f seconds.\n", $grbName, $TIMEDELAY;
                  #sleep $DATADELAY_CBC - $gpsDiff;
                  sleep $TIMEDELAY;
                } else {
                  printf LOGFILE "GRB %s:  Not enough frame files found for LLO.\n", $grbName;
##NEW

                  printf LOGFILE "GRB %s:  Checking for Least required files for LLO - option 1.\n", $grbName;
                  $OBSERVATORY = "L";
                  $gridcmd1 = "gw_data_find --server=".$DATASERVER." --observatory ".$OBSERVATORY." --type L1_".$FRAMETYPE;
                  $command1 = $gridcmd1.$gridcmd2.$gpsStart_new_1.$gridcmd3.$gpsEnd_new_1.$gridcmd4;
                  printf LOGFILE "GRB %s: Least Running gw_data_find:  %s\n", $grbName, $command1;
                   @frames1 = ();
                   @frames1 = `$command1`;
                    chomp(@frames1);
                    printf LOGFILE "GRB %s:  %d Least frame files found for LLO - option 1.\n", $grbName, $#frames1 + 1;
                    if ($#frames1 + 1 >= $NFRAMESMIN_NEW) {
                    $optionFlagL1 = 1;
                    }

                  printf LOGFILE "GRB %s:  Checking for Least required files for LLO - option 2.\n", $grbName;
                  $OBSERVATORY = "L";
                  $gridcmd1 = "gw_data_find --server=".$DATASERVER." --observatory ".$OBSERVATORY." --type L1_".$FRAMETYPE;
                  $command2 = $gridcmd1.$gridcmd2.$gpsStart_new_2.$gridcmd3.$gpsEnd_new_2.$gridcmd4;
                  printf LOGFILE "GRB %s: Least Running gw_data_find:  %s\n", $grbName, $command2;
                   @frames2 = ();
                   @frames2 = `$command2`;
                    chomp(@frames2);
                    printf LOGFILE "GRB %s:  %d Least frame files found for LLO - option 2.\n", $grbName, $#frames2 + 1;
                    if ($#frames2 + 1 >= $NFRAMESMIN_NEW) {
                    $optionFlagL1 = 2;
                    }

                    @frames = ();
                    if ($#frames2 > $#frames1){
                    @frames = @frames2;
                    } else {
                    @frames = @frames1;
                    }

##NEW
                  last;
                }
              } else {
                last;
              }
            }
          }
          $nFramesL1 = $#frames + 1;

##NEW         
          $optionFlag = $optionFlagH1+$optionFlagL1;   
##NEW
          if ($nFramesH1 >= $NFRAMESMIN_NEW || $nFramesL1 >= $NFRAMESMIN_NEW && $optionFlag != 3) {

            #=== Set condor flag ===#
            $condorFlag = 1;
            printf LOGFILE "Condor flag:  %s:  \n", $condorFlag;

          } else {
            $jobStatus = 'NOFRAMES';
            printf LOGFILE "Job status:  %s:  \n", $jobStatus;
            printf PROCESSEDGRB "%s\n", $grbName;
            $processedGrbs[$#processedGrbs+1] = sprintf "%s", $grbName;
          }

          #=== Determine IFOs with science segments ===#
          @netIfos1  = ();
          $gpsStart = int($grbGPS - $SEGDURATIONLEFT_NEW);
          $gpsEnd   = int($gpsStart + $SEGDURATION_CBC_NEW);
          printf "$gpsStart $gpsEnd\n";
          @netIfos1 = findIFONetwork($LIGORUN,\@ALLIFOS,$grbGPS,$gpsStart,$gpsEnd,$SEGDURATION_CBC_NEW,\@SEGMENTTYPE,$SEGSERVER);
          
          @netIfos2  = ();
          $gpsEnd   = int($grbGPS + $SEGDURATIONRIGHT_NEW);
          $gpsStart = int($gpsEnd - $SEGDURATION_CBC_NEW);
          printf "$gpsStart $gpsEnd\n";
          @netIfos2 = findIFONetwork($LIGORUN,\@ALLIFOS,$grbGPS,$gpsStart,$gpsEnd,$SEGDURATION_CBC_NEW,\@SEGMENTTYPE,$SEGSERVER);

          @netIfos  = ();
          if ($#netIfos1 > $#netIfos2) {
          @netIfos = @netIfos1;
          } else {
          @netIfos = @netIfos2;
          }


           if ($condorFlag) {

            #=== Check that there are at least two available networks ===#
#            if ($#netIfos + 1 >= 2) {
            #=== Check that there are at least one available ifo ===#
            if ($#netIfos + 1 >= 1) {

              #=== Check that frames are available ===#
              foreach $ifo (@netIfos) {
                $nFramesIFO = 0;
                $nFramesIFO = eval sprintf "\$nFrames%s", $ifo;
                if ($ifo ne 'V1') {
                  if ($nFramesIFO < $NFRAMESMIN_NEW) {
                    $jobStatus = 'NOFRAMES';
                    printf PROCESSEDGRB "%s\n", $grbName;
                    $processedGrbs[$#processedGrbs+1] = sprintf "%s", $grbName;
                  }
                } 
              }
               
                #=== Update veto file ====#
                #$curl_vetofile = sprintf "curl --output /home/grb.exttrig/Online/O1/processor/params/CBC/H1L1-HOFT_C00_O1_CBC.xml https://code.pycbc.phy.syr.edu/detchar/veto-definitions/download/master/cbc/O1/H1L1-HOFT_C00_O1_CBC.xml";
                #system $curl_vetofile;

                #=== Update GRB parameters ====#
                $updateparam = sprintf "./getupdatedparam.pl %s CBC", $grbName;
                system $updateparam;
                $UPGRBDIR = sprintf "%s/updated_param",$GRBDIR;
                $updatedGrbFile   = sprintf "%s/%s_updatedparam_CBC.txt", $UPGRBDIR, $grbName;
                open UPGRBFILE, "<$updatedGrbFile"
                     or die "Error opening updated GRB file $updatedGrbFile: $!";
                chomp(@inputLinesAll = <UPGRBFILE>);
                close UPGRBFILE;
                foreach $inputLine (@inputLinesAll) {

                  if ($inputLine =~ /\#/) {
                    next;
                   }

                if ($inputLine =~ /^(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s*$/) {
                $grbGPS_u= $1;
                $grbRA_u=$2;
                $grbDec_u=$3;
                $grbError_u=$4;
                $grbTrigDur_u=$5;

                } else {
                printf LOGFILE "Error reading GRB file:  $inputLine\n";
                next;
                 }
                }
                if ($grbGPS_u ne "") {
                $grbGPS = ceil($grbGPS_u);
                $grbRA = $grbRA_u;
                $grbDec = $grbDec_u;
                $grbError = $grbError_u;
                $grbTrigDur = $grbTrigDur_u;
                }

                if ($grbTrigDur > 1.024) {
                $jobStatus = 'LONGGRB';
                printf PROCESSEDGRB "%s\n", $grbName;
                $processedGrbs[$#processedGrbs+1] = sprintf "%s", $grbName;
                }


              #=== If frames are available ===#
              if ($jobStatus ne 'NOFRAMES' && $jobStatus ne 'LONGGRB') {

                #=== Write processed GRB to file ===#
                printf PROCESSEDGRB "%s\n", $grbName;
                $processedGrbs[$#processedGrbs+1] = sprintf "%s", $grbName;

                #=== Change working directory ===#
                $jobGrbDir = sprintf "GRB%s", $grbName;
                $jobDir    = sprintf "%s/%s", $JOBSDIR, $jobGrbDir;
                $mkdirResult = 0;
                if (! -e $jobDir) {
                  $mkdirCommand = sprintf "mkdir %s", $jobDir;
                  $mkdirResult  = 1;
                  $mkdirResult  = system "$mkdirCommand";
                }


                if ($mkdirResult == 0) { 
                  $gpsTimeNow    = `lalapps_tconvert now`;
                  $latency = ($gpsTimeNow - $grbGPS)/60;
                  $latency = sprintf("%.2f",$latency);

                  $ifoString = '';
                  foreach $ifo (@netIfos) {
                    $ifoString = "$ifoString"."$ifo";
                  }
                  $detectorString = ''; 
                  foreach $netIfo (@netIfos) {
                    $detectorString = sprintf "%s --detector %s", $detectorString, $netIfo;
                  }

                  #$iniFileone = sprintf "%s/%s", $PARAMSDIR, $ANALYSIS_FILE;
                  #$iniFileoneto = sprintf "%s/%s", $jobDir, $ANALYSIS_FILE;
                  #$cpCommandone = sprintf "cp %s %s", $iniFileone, $iniFileoneto;
                  #system $cpCommandone;

                  #$iniFilethree = sprintf "%s/%s", $PARAMSDIR, $VETO_FILE;
                  #$iniFilethreeto = sprintf "%s/%s", $jobDir, $VETO_FILE;
                  #$cpCommandthree = sprintf "cp %s %s", $iniFilethree, $iniFilethreeto;
                  #system $cpCommandthree;
 
                  #$iniFilefive = sprintf "%s/%s", $PARAMSDIR, $DATA_FILE;
                  #$iniFilefiveto = sprintf "%s/%s", $jobDir, $DATA_FILE;
                  #$cpCommandfive = sprintf "cp %s %s", $iniFilefive, $iniFilefiveto;
                  #system $cpCommandfive;

                  #$iniFiletwo = sprintf "%s/%s", $PARAMSDIR, $INJ_FILE;
                  #$iniFiletwoto = sprintf "%s/%s", $jobDir, $INJ_FILE;
                  #$cpCommandtwo = sprintf "cp %s %s", $iniFiletwo, $iniFiletwoto;
                  #system $cpCommandtwo;

                  #$iniFilefour = sprintf "%s/%s", $PARAMSDIR, $PP_FILE;
                  #$iniFilefourto = sprintf "%s/%s", $jobDir, $PP_FILE;
                  #$cpCommandfour = sprintf "cp %s %s", $iniFilefour, $iniFilefourto;
                  #system $cpCommandfour;

                  #$iniFilesix = sprintf "%s/TMPLTBANKS/%s", $PARAMSDIR, $TEMPLATEBANKFILE;
                  #$iniFilesixto = sprintf "%s/%s", $jobDir, $TEMPLATEBANKFILE;
                  #$cpCommandsix = sprintf "cp %s %s", $iniFilesix, $iniFilesixto;
                  #system $cpCommandsix;

                  chdir "$jobDir";
                  #$SKY_JITTER = $grbError;
                  
                  if ($grbSat eq 'Fermi') {
                    $SKY_ERROR = $grbError;
                  } else {
                    $SKY_ERROR = 0;
                    }

                  $HTML_DIR_GRB = sprintf "%s/GRB%s", $HTML_DIR, $grbName;
                  $starttime = $grbGPS - $SEGDURATIONLEFT_CBC;
                  $endtime = $starttime + $SEGDURATION_CBC;
                  
                  $getworkflow = sprintf "wget http://pycbc.phy.syr.edu/pycbc-software/v1.4.1/x86_64/composer_xe_2015.0.090/pycbc_make_offline_grb_workflow";
                  system $getworkflow;
                  $permissionworkflow = "chmod 755 ./pycbc_make_offline_grb_workflow";
                  system $permissionworkflow;

                  $getsubmitdax = sprintf "wget http://pycbc.phy.syr.edu/pycbc-software/v1.4.1/x86_64/composer_xe_2015.0.090/pycbc_submit_dax";
                  system $getsubmitdax;
                  $permissionsubmitdax = sprintf "chmod 755 ./pycbc_submit_dax";
                  system $permissionsubmitdax;
 
                  if ($grbSat eq 'Fermi') {
                    #$pylalFile = sprintf "%s/pylal_coh_PTF_sky_containment_modify.py", $PARAMSDIR;
                    #$pylalFileto = sprintf "%s/pylal_coh_PTF_sky_containment_modify.py", $jobDir;
                    #$cpCommandpylal = sprintf "cp %s %s", $pylalFile, $pylalFileto;
                    #system $cpCommandpylal;
                    #$SKY_JITTER_ARCMIN = $SKY_JITTER*60;
                    #$pylalCommand = '';
                    #$pylalCommand = sprintf "python pylal_coh_PTF_sky_containment_modify.py -s 'fermi' -e %s -n 1.65 -a 7.5", $SKY_JITTER_ARCMIN;
                    #$SKY_ERROR = -1;
                    #$SKY_ERROR = `$pylalCommand`;
                    #chomp($SKY_ERROR);
                    #$sedCommand = sprintf "sed -i 's/\\[jitter_skyloc\\]/[jitter_skyloc]\\napply-fermi-error = /g' %s", $INJ_FILE;
                    #system $sedCommand;
                  $prepCommand = sprintf "./pycbc_make_offline_grb_workflow --config-files https://code.pycbc.phy.syr.edu/ligo-cbc/pycbc-config/download/1630c60bf912b0ca671c2b9906a922a1e8c6df73/O2/pygrb/executables_production.ini https://code.pycbc.phy.syr.edu/ligo-cbc/pycbc-config/download/1630c60bf912b0ca671c2b9906a922a1e8c6df73/O2/pygrb/analysis_o2.ini https://code.pycbc.phy.syr.edu/ligo-cbc/pycbc-config/download/1630c60bf912b0ca671c2b9906a922a1e8c6df73/O2/pygrb/injections_o2.ini https://code.pycbc.phy.syr.edu/ligo-cbc/pycbc-config/download/1630c60bf912b0ca671c2b9906a922a1e8c6df73/O2/pygrb/online_o2.ini https://code.pycbc.phy.syr.edu/ligo-cbc/pycbc-config/download/1630c60bf912b0ca671c2b9906a922a1e8c6df73/O2/pygrb/postprocessing_o2.ini --config-overrides workflow:output-directory:%s workflow:ra:%s workflow:dec:%s workflow:sky-error:%s workflow:trigger-name:%s workflow:trigger-time:%s workflow:start-time:%s workflow:end-time:%s workflow:html-dir:%s jitter_skyloc:apply-fermi-error:", $jobDir, $grbRA, $grbDec, $SKY_ERROR, $grbName, $grbGPS, $starttime, $endtime, $HTML_DIR_GRB;                    
                    } else{
                  $prepCommand = sprintf "./pycbc_make_offline_grb_workflow --config-files https://code.pycbc.phy.syr.edu/ligo-cbc/pycbc-config/download/1630c60bf912b0ca671c2b9906a922a1e8c6df73/O2/pygrb/executables_production.ini https://code.pycbc.phy.syr.edu/ligo-cbc/pycbc-config/download/1630c60bf912b0ca671c2b9906a922a1e8c6df73/O2/pygrb/analysis_o2.ini https://code.pycbc.phy.syr.edu/ligo-cbc/pycbc-config/download/1630c60bf912b0ca671c2b9906a922a1e8c6df73/O2/pygrb/injections_o2.ini https://code.pycbc.phy.syr.edu/ligo-cbc/pycbc-config/download/1630c60bf912b0ca671c2b9906a922a1e8c6df73/O2/pygrb/online_o2.ini https://code.pycbc.phy.syr.edu/ligo-cbc/pycbc-config/download/1630c60bf912b0ca671c2b9906a922a1e8c6df73/O2/pygrb/postprocessing_o2.ini --config-overrides workflow:output-directory:%s workflow:ra:%s workflow:dec:%s workflow:sky-error:%s workflow:trigger-name:%s workflow:trigger-time:%s workflow:start-time:%s workflow:end-time:%s workflow:html-dir:%s", $jobDir, $grbRA, $grbDec, $SKY_ERROR, $grbName, $grbGPS, $starttime, $endtime, $HTML_DIR_GRB;
                   }

# For cohPTF run without injections but with timeslide 
                  #$LOCAL_CONFIG_FILES = sprintf "%s %s %s %s %s", $ANALYSIS_FILE, $INJ_FILE, $PP_FILE, $VETO_FILE, $DATA_FILE;
                  #$HTML_DIR_GRB = sprintf "%s/GRB%s", $HTML_DIR, $grbName;
                  #$BANK_FILE = sprintf "%s/%s", $JOBSDIR, $TEMPLATEBANKFILE;
                  #$starttime = $grbGPS - $SEGDURATIONLEFT_CBC;
                  #$endtime = $starttime + $SEGDURATION_CBC;     
                  #$prepCommand = sprintf "pycbc_make_offline_grb_workflow --config-files %s --config-overrides workflow:output-directory:%s workflow:ra:%s workflow:dec:%s workflow:sky-error:%s workflow:trigger-name:%s workflow:trigger-time:%s workflow:start-time:%s workflow:end-time:%s workflow:html-dir:%s", $LOCAL_CONFIG_FILES, $jobDir, $grbRA, $grbDec, $SKY_ERROR, $grbName, $grbGPS, $starttime, $endtime, $HTML_DIR_GRB;

#                  $prepCommand = sprintf "pycbc_make_offline_grb_workflow --config-files https://code.pycbc.phy.syr.edu/andrew-williamson/pycbc-config/download/pygrb_o2/O2/pygrb/executables_production.ini https://code.pycbc.phy.syr.edu/andrew-williamson/pycbc-config/download/pygrb_o2/O2/pygrb/analysis_o2.ini https://code.pycbc.phy.syr.edu/andrew-williamson/pycbc-config/download/pygrb_o2/O2/pygrb/injections_o2.ini https://code.pycbc.phy.syr.edu/andrew-williamson/pycbc-config/download/pygrb_o2/O2/pygrb/online_o2.ini https://code.pycbc.phy.syr.edu/andrew-williamson/pycbc-config/download/pygrb_o2/O2/pygrb/postprocessing_o2.ini --config-overrides workflow:output-directory:%s workflow:ra:%s workflow:dec:%s workflow:sky-error:%s workflow:trigger-name:%s workflow:trigger-time:%s workflow:start-time:%s workflow:end-time:%s workflow:html-dir:%s", $jobDir, $grbRA, $grbDec, $SKY_ERROR, $grbName, $grbGPS, $starttime, $endtime, $HTML_DIR_GRB;
    
                  printf "$prepCommand\n";

                  $prepResult = 1;
                  $prepResult = system $prepCommand;

                  print "pygrb command output: ";
                  print "$prepResult\n"; 
                  #=== Submit condor jobs ===#
                  if ($prepResult == 0) {
                    $currentTime = time;
                    $timeString = localtime $currentTime;
                    printf LOGFILE "GRB %s: Preparing pegasus plan %s.\n", $grbName, $timeString;
                    $grbDir  = sprintf "%s/%s", $jobDir, $jobGrbDir; 
                    chdir "$grbDir"; 
                    $Pegasusjob_LOGPATH = sprintf "/home/%s/log/%s/GRB%s", $USERNAME, $LIGORUN, $grbName;
                    system "mkdir -p $Pegasusjob_LOGPATH"; 
                    $pegasus_plan = sprintf "../pycbc_submit_dax --dax pygrb_offline.dax --accounting-group ligo.prod.o2.cbc.grb.cohptfonline --local-dir %s --no-create-proxy --append-site-profile 'local:condor|accounting_group_user:dipongkar.talukder'", $Pegasusjob_LOGPATH; 
                    $jobCluster   = 0;
                    @condorResult = ();
		    @condorResult = `$pegasus_plan`;
                    chomp(@condorResult);
                    foreach $condorLine (@condorResult) {
                      if ($condorLine =~ /cluster (\d+)/) {
                        $jobCluster = $1;                      
                        last;
                      }
                    }
  
                    if ($jobCluster != 0) {
                      printf "condor command for GRB %s successfully launched on cluster %d\n", $grbName, $jobCluster;
                      $jobStatus = 'SUBMITTED';
                    }
                  }
                  #=== Endif prepResult ===#

                  chdir "$SCRIPTSDIR";
                }
                #=== Endif mkdirResult ===#

                #############endofCohPTF#######################
              }
              #=== Endif frames are available ===#
            }
            #=== Endif two or more available IFOS ===#
          }
          #=== Endif condorFlag ===#

          if ($ifoString eq '--' && $#netIfos + 1 > 0) {
            $ifoString = '';
            foreach $ifo (@netIfos) {
              $ifoString = "$ifoString"."$ifo";
            }
          }

          if ($#netIfos + 1 == 0 || $#netIfos + 1 == 1) {
            #=== Write processed GRB to file ===#
            printf PROCESSEDGRB "%s\n", $grbName;
            $processedGrbs[$#processedGrbs+1] = sprintf "%s", $grbName;
          }
          
          #=== Write out status for this GRB ===#

          #=== Check if this GRB has an entry in the output monitor file ===#
          $sedCommand = sprintf "sed -n '/^%s /=' %s", $grbName, $statusFile;
          $lineNumber = -1;
          if (-e $statusFile) {
            $lineNumber = `$sedCommand`;
            chomp($lineNumber);
          }
          
          $grbDate    = `lalapps_tconvert -f %Y-%m-%d $grbGPS`;
          chomp($grbDate);
          $grbTime    = `lalapps_tconvert -f %T $grbGPS`;
          chomp($grbTime);          

          if ($lineNumber =~ /^[1-9]/) {
            $monitorString = sprintf "%s %10.0f %s %s %7.3f %7.3f %7.3f %s %s %7.3f %s %s %s %s %03d",
                             $grbName, $grbGPS, $grbDate, $grbTime, $grbRA, $grbDec, $grbError, $ifoString, $grbSat, $grbTrigDur,
                             $jobCluster, $latency, $jobRunTime, $jobStatus, $rescueCtr;
            $sedCommand = sprintf "sed '%ds/.*/%s/' %s > %s",
                          $lineNumber, $monitorString, $statusFile, $tempFile;
            system $sedCommand;

            $cpCommand = sprintf "cp %s %s", $tempFile, $statusFile;
            system $cpCommand;
          } else {
          #=== Endif GRB has an entry in the monitor file ===#

            #=== Open output job status file ===#
            open STATFILE, ">>$statusFile"
              or die "Error opening file $statusFile: $!";

            select STATFILE;
            $| = 1;
            select STDOUT;

            printf STATFILE "%s %10.0f %s %s %7.3f %7.3f %7.3f %s %s %7.3f %s %s %s %s %03d\n",
                   $grbName, $grbGPS, $grbDate, $grbTime, $grbRA, $grbDec, $grbError, $ifoString, $grbSat, $grbTrigDur, $jobCluster, $latency, $jobRunTime, $jobStatus, $rescueCtr;
            close STATFILE;
          }

          #=== Note current time ===#
          $gpsTime    = `lalapps_tconvert now`;
          chomp($gpsTime);
#          $gpsTime    = 1058716992;
          $timeString = `lalapps_tconvert $gpsTime`;
          chomp($timeString);


          #=== Calculate processing time in hours ===#
          $processTime = 0;
          $processTime = ($gpsTime - $grbGPS)/3600.0;
          $processTime = sprintf "%5.3f", $processTime;
          if ($processTime < 0) {
            $processTime = 0;
          }

          printf NOTESFILE "%s\n", $grbName;

          &sendStatusMessage;

          #=== Increment GRB counter ===#
          $i++;
        }

        #======================================================================#
        #                       End loop through GRBs                          #
        #======================================================================#

    } else {
      printf LOGFILE "Input GRB file $currentGrbFile does not exist.\n";
    }
    #=== Endif check if GRB file exists ===#

    close NOTESFILE;
    close PROCESSEDGRB;

  } else {

    #=== Sleep for a few minutes ===#
    $timeString = localtime;
    printf LOGFILE "Starting sleep on %s.\n", $timeString;
    close LOGFILE;
    sleep $TIMEDELAY - $currentDelay;
  }
  #=== Endif check if ten minutes have elapsed since last scp ===#

  #=== Calculate time elapsed between now and last scp ===#
  $currentDelay = time - $previousTime;

}

sub sendStatusMessage {

  $emailsFile   = sprintf "%s/eventadvocate/%s_grbemails.txt", $SCRIPTSDIR, $grbName;
  $messagesFile = sprintf "%s/grbmessages_%s.log", $SCRIPTSDIR, $LIGORUN;

  $eheaderTable = {};
  $eheaderTable->{'SUBJECT'} = sprintf "[PyGRB] GRB %s %s", $grbName, $jobStatus;

  #=== Construct the message ===#
  if ($jobStatus eq 'SUBMITTED') {
         if ($ANNOTATEFLAG eq 'YES') {
         $annotateFile = sprintf "%s/logGraceDB_CBC_start_template.py", $SCRIPTSDIR;
         $catCommand = sprintf "cat %s | sed -e 's/EVENT_ID/%s/g' -e 's/HOUR/%s/g' -e 's/NETWORK/%s/g'> logGraceDB.py", $annotateFile, $grbName, $processTime, $ifoString;
         system $catCommand;
         $logCommand = sprintf "python logGraceDB.py";
         system $logCommand;
         $rmCommand = sprintf "rm -f logGraceDB.py";
         system $rmCommand;    
         }
    $noticeString = sprintf "GRB %s has been %s, %8.3f hours after the trigger.",
                                 $grbName, $jobStatus, $processTime;
  } else {
         if ($ANNOTATEFLAG eq 'YES') {
         $annotateFile = sprintf "%s/annotateGraceDB_CBC_nodata_template.py", $SCRIPTSDIR;
         $catCommand = sprintf "cat %s | sed -e 's/EVENT_ID/%s/g'> annotateGraceDB.py", $annotateFile, $grbName;
         system $catCommand;
         $logCommand = sprintf "python annotateGraceDB.py";
         system $logCommand;
         $rmCommand = sprintf "rm -f annotateGraceDB.py";
         system $rmCommand;
         }

    if ($jobStatus eq 'DATACUT' || $jobStatus eq 'NOFRAMES' || $jobStatus eq 'LONGGRB') {
      $noticeString = sprintf "GRB %s cannot be analyzed, %8.3f hours after the trigger.",
                                   $grbName, $processTime;
    } else {
      if ($jobStatus eq 'LARGEERR') {
        $noticeString = sprintf "GRB %s has a large position error, will not be analyzed.",
                                     $grbName;
      }
    }
  }
  $noticeString = sprintf "%s\n\nMain results page:", $noticeString;
  $noticeString = sprintf "%s\n<%s>\n", $noticeString, $MAINURL;

  $eheaderTable->{'MESSAGE'} = $noticeString;

  printf "$noticeString\n";

  #=== Send the message ===#
  grbNotify($eheaderTable,$emailsFile,$messagesFile);
}

#=== End xprocessGrb ===#
