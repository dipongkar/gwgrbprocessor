#!/usr/bin/perl

#use Switch;
#use strict;
use warnings;
use feature qw(switch say);

require '/home/grb.exttrig/Online/O2/processor/exttrig_utils.pl';
require '/home/grb.exttrig/Online/O2/processor/exttrig_params.pl';

#=== Get user name ===#
$USERNAME = `whoami`;
chomp($USERNAME);

#=== Specify local working directories ===#
$HOMEDIR    = sprintf "/home/%s", $USERNAME;
$GRBDIR     = sprintf "%s/Online/%s/grbs", $HOMEDIR, $LIGORUN;
$SCRIPTSDIR = sprintf "%s/Online/%s/processor", $HOMEDIR, $LIGORUN;
$WEBDIR     = sprintf "%s/Online/%s/processor/web", $HOMEDIR, $LIGORUN;
$JOBSDIR    = sprintf "%s/runs/CBC", $SCRIPTSDIR;
$PARAMSDIR  = sprintf "%s/params/CBC", $SCRIPTSDIR;
$PROCWEBDIR = sprintf "%s/public_html/grb/online/%s/search/results", $HOMEDIR, $LIGORUN;
$LOGDIR     = sprintf "/usr1/%s/log", $USERNAME;
#$PP_FILE    = sprintf "ADE_GRB_post_processing.ini";
#$INJ_FILE   = sprintf "ADE_injections_vlow.ini";
#=== Specify output html file ===#
$htmlFile = sprintf "%s/OnlineGRB_page_%s.html", $WEBDIR, $LIGORUN;

#=== Specify line offset for job status line in html file ===#
$lineOffset = 9;

#=== Set sleep time in seconds between monitoring periods ===#

#=== Set start time ===#
$currentDelay = $MONDELAY + 1;

    #=== Update time of scp ===#
    $previousTime = time;

    #=== Open input search status file ===#
    $processStatusFile = sprintf "%s/monitor_status_cohptf_%s.log", $SCRIPTSDIR, $LIGORUN;
    open PROCSTAT, "<$processStatusFile"
      or die "Error opening input search status file $processStatusFile: $!";
    chomp(@procStats = <PROCSTAT>);
    close PROCSTAT;

    #=== Open output monitor status file ===#
    $monitorStatusFile = sprintf "%s/monitor_status_cohptf_%s.log", $SCRIPTSDIR, $LIGORUN;
    $tempFile = sprintf "%s/monitor_status_cohptf_%s_temp.log", $SCRIPTSDIR, $LIGORUN;

    #=== Open output processed jobs file ===#
    $processedJobsFile = sprintf "%s/processedjobs_cohptf_%s.log", $SCRIPTSDIR, $LIGORUN;
    open PROCJOB, ">>$processedJobsFile"
      or die "Error opening output processed jobs file $processedJobsFile: $!";

    #=== Loop through GRBs ===#
    foreach $procStat (@procStats) {
      ($grbName,$grbGPS,$grbDate,$grbTime,$grbRA,$grbDec,$grbError,$ifoString,$grbSat,$grbTrigDur,$jobCluster,$latency,$jobRunTime,$jobStatus,$rescueCtr) = split(' ',$procStat);

      if ($grbName eq '') {
        next;
      }

      if ($jobStatus eq 'NOFRAMES' || $jobStatus eq 'LONGGRB') {
        if (length($ifoString) < 2) {
          $jobStatus = 'DATACUT';
        } else {
          #=== Update search status web page ===#
          $searchStatusTable = {};
          $searchStatusTable->{'GRB_NAME'}      = $grbName;
          $searchStatusTable->{'GRB_GPS'}       = $grbGPS;
          $searchStatusTable->{'GRB_DATE'}      = $grbDate;
          $searchStatusTable->{'GRB_TIME'}      = $grbTime;
          $searchStatusTable->{'GRB_RA'}        = $grbRA;
          $searchStatusTable->{'GRB_DEC'}       = $grbDec;
          $searchStatusTable->{'GRB_ERR'}       = $grbError;
          $searchStatusTable->{'IFO_STRING'}    = $ifoString;
          $searchStatusTable->{'GRB_SAT'}       = $grbSat;
          $searchStatusTable->{'TRIG_DUR'}      = $grbTrigDur;
          $searchStatusTable->{'JOB_CLUSTER'}   = $jobCluster;
          $searchStatusTable->{'LATENCY'}       = $latency;
          $searchStatusTable->{'RUN_TIME'}      = $jobRunTime;
          $searchStatusTable->{'JOB_STATUS'}    = $jobStatus;
          $searchStatusTable->{'RESCUE_CTR'}    = $rescueCtr;

          $resultsLink = '';
          updateWebStatusPTF($searchStatusTable,$htmlFile,$lineOffset,$resultsLink);

          next;
        }
      } 


      #=== If condor job was submitted, check on jobs ===#
      if ($jobStatus ne 'PROCESSED' && ($jobStatus ne 'RESCUE' || $jobCluster != 0)) {
        $condorCommand = sprintf "condor_q -nobatch %d", $jobCluster;
        @condorResult  = ();
        @condorResult  = `$condorCommand`;
        chomp(@condorResult);

        #=== If job is not found ===#
        #if ($#condorResult < 4) {
        if ($#condorResult < 6) {
          #=== Append GRB to output processed jobs file ===#
          if ($jobStatus ne 'DATACUT' && $#condorResult+1 != 0) {
            #=== Check if job outputs are complete ===#
            $grblogdir = sprintf "/home/grb.exttrig/log/%s/GRB%s", $LIGORUN, $grbName;
            opendir $dh, $grblogdir or die "Could not open '$grblogdir' for reading '$!'\n";
            my @contents = grep {$_ ne '.' and $_ ne '..'} readdir $dh;
            foreach my $content (@contents) {
            $pygrbtmp = $content;
            print "$content\n";
            }                       
            closedir $dh;
            $Pegasusjobdir = sprintf "%s/%s/work", $grblogdir, $pygrbtmp;
            print "Run directory:\n";
            print "$Pegasusjobdir\n";
            $jobGrbDir = sprintf "GRB%s", $grbName;
            $jobDir    = sprintf "%s/%s", $JOBSDIR, $jobGrbDir;
            $grbDir  = sprintf "%s/%s", $jobDir, $jobGrbDir;
            #$jobInsDir =  sprintf "%s/inspiral", $grbDir;
            $xcheckCommand = sprintf "python CBCcheckgrboutput.py -t %s -g %s -j inspiral", $Pegasusjobdir, $grbDir;
            @xcheckResult  = ();
            @xcheckResult  = `$xcheckCommand`;
            chomp(@xcheckResult);
            $rescueFlag = 0;
            foreach $xcheckLine (@xcheckResult) {
              if ($xcheckLine =~ /No output inspiral file missing/i) {
                $jobStatus = 'PROCESSED';
                last;
              } else {
                $jobStatus = $jobStatus;
                print "$jobStatus\n";
                }
            }

            if ($jobStatus ne 'PROCESSED') {
              $jobStatus  = 'RESCUE';
              $rescueFlag = 1;
              #=== Run rescue dag ===#
              @jobdirFiles = ();
              $lsCommand   = sprintf "ls $Pegasusjobdir";
              @jobdirFiles = `$lsCommand`;
              chomp(@jobdirFiles);
              $rescueDag = '';
              foreach $jobdirLine (@jobdirFiles) {
                if ($jobdirLine =~ /(pygrb_offline-0\.dag)\.rescue(\d+)/) {
                  $rescueDag = $1;
                    $rescueNum = $2;
                    if ($rescueNum > $rescueCtr) {
                      $rescueCommand =  sprintf "pegasus-run %s", $Pegasusjobdir;
                      $jobCluster = 0;
                      $jobRunTime = '0+00:00:00';
                      printf "$rescueCommand\n";
                      chdir "$grbDir";
                      @rescueResult = ();
                      @rescueResult = `$rescueCommand`;
                      $rescueCtr++;
                      chomp(@rescueResult);
                      foreach $rescueLine (@rescueResult) {
                        if ($rescueLine =~ /cluster (\d+)/) {
                          $jobCluster = $1;
                          last;
                        }
                      }   
                      chdir "$SCRIPTSDIR";
                      last;
                    }
                }
              }
            }
          }
        } else {
          #=== Parse the condor_q output ===#
          #$condorLine = $condorResult[$#condorResult];
          $condorLine = $condorResult[$#condorResult-2];
          ($clusterID,$ownerName,$submitDate,$submitTime, 
             $jobRunTime,$runStatus,$runPriority,$runSize,$runCommand) = 
               split(' ',$condorLine);
          printf "$clusterID $ownerName $submitDate $submitTime ";
          printf "$jobRunTime $runStatus $runPriority $runSize $runCommand\n";

          #=== Specify job status explicitly ===#
          #switch ($runStatus) {
          #  case 'R' { $jobStatus = 'RUNNING'; }
          #  case 'I' { $jobStatus = 'IDLE';    }
          #  case 'H' { $jobStatus = 'HELD';    }
          given ($runStatus) {
            when ('R') { $jobStatus = 'RUNNING'; }
            when ('I') { $jobStatus = 'IDLE';    }
            when ('H') { $jobStatus = 'HELD';    }
          }
        }

        #=== Check if this GRB has an entry in the output monitor file ===#
        $sedCommand = sprintf "sed -n '/^%s /=' %s", $grbName, $monitorStatusFile;
        $lineNumber = -1;
        $lineNumber = `$sedCommand`;
        chomp($lineNumber);

        if ($lineNumber =~ /^[1-9]/) {
          #=== If the GRB already has an entry,  ===#
          #=== replace the entry with new status ===#
          if ($jobStatus eq 'PROCESSED' || $jobStatus eq 'DATACUT') {
            #=== Delete entry from monitor file ===#
            $sedCommand = sprintf "sed '%dd' %s > %s", 
                     $lineNumber, $monitorStatusFile, $tempFile;

            $procjobCluster = 0;
            $procjobRunTime = '--';
            $procjobStatus  = '--';
            $procrescueCtr  = 0;

            if ($jobStatus eq 'PROCESSED') { 
              $procjobCluster = $jobCluster;
              $procjobRunTime = $jobRunTime;
              $procjobStatus = 'RUNNING';
              }

            printf PROCJOB "%s %10.0f %s %s %7.3f %7.3f %7.3f %s %s %7.3f  %s %s %s %s %03d %s %s %s %03d\n", 
                            $grbName, $grbGPS, $grbDate, $grbTime, $grbRA, $grbDec, $grbError, $ifoString, $grbSat, $grbTrigDur,
                            $jobCluster, $latency, $jobRunTime, $jobStatus, $rescueCtr,
                            $procjobCluster, $procjobRunTime, $procjobStatus, $procrescueCtr;
          } else {
            $monitorString = sprintf "%s %10.0f %s %s %7.3f %7.3f %7.3f %s %s %7.3f %s %s %s %s %03d", 
                             $grbName, $grbGPS, $grbDate, $grbTime, $grbRA, $grbDec, $grbError, $ifoString, $grbSat, $grbTrigDur, $jobCluster, $latency, $jobRunTime, $jobStatus, $rescueCtr;
            $sedCommand = sprintf "sed '%ds/.*/%s/' %s > %s", 
                     $lineNumber, $monitorString, $monitorStatusFile, $tempFile;
          }
          system $sedCommand;

          $cpCommand = sprintf "cp %s %s", $tempFile, $monitorStatusFile;
          system $cpCommand;
        }
        #=== Endif GRB has an entry in the monitor file ===#

        #=== Update search status web page ===#
        $searchStatusTable = {};
        $searchStatusTable->{'GRB_NAME'}    = $grbName;
        $searchStatusTable->{'GRB_GPS'}     = $grbGPS;
        $searchStatusTable->{'GRB_DATE'}    = $grbDate;
        $searchStatusTable->{'GRB_TIME'}    = $grbTime;
        $searchStatusTable->{'GRB_RA'}      = $grbRA;
        $searchStatusTable->{'GRB_DEC'}     = $grbDec;
        $searchStatusTable->{'GRB_ERR'}     = $grbError;
        $searchStatusTable->{'IFO_STRING'}  = $ifoString;
        $searchStatusTable->{'GRB_SAT'}     = $grbSat;
        $searchStatusTable->{'TRIG_DUR'}    = $grbTrigDur;
        $searchStatusTable->{'JOB_CLUSTER'} = $jobCluster;
        $searchStatusTable->{'LATENCY'}     = $latency;
        $searchStatusTable->{'RUN_TIME'}    = $jobRunTime;
        $searchStatusTable->{'JOB_STATUS'}  = $jobStatus;
        $searchStatusTable->{'RESCUE_CTR'}  = $rescueCtr;

        $resultsLink = '';
        updateWebStatusPTF($searchStatusTable,$htmlFile,$lineOffset,$resultsLink);
      }
      #=== Endif condor job was submitted, check on jobs ===#
    }
    #=== End loop through GRBs ===#

#=== End monitorGrb ===#
